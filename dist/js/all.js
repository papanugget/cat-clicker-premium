const controller={init:function(){catsModel.currentCat=catsModel.cats[0],catListViewer.init(),catViewer.init()},getCurrent:function(){return catsModel.currentCat},getCats:function(){return catsModel.cats},setCurrent:function(t){catsModel.currentCat=t},clickCount:function(){catsModel.currentCat.clicks++,catViewer.render()}};let catsModel={cats:[{name:"Kedi",image:"./img/1.jpg",id:0,clicks:0},{name:"Graven",image:"./img/2.jpg",id:1,clicks:0},{name:"Fluffikins",image:"./img/3.jpg",id:2,clicks:0},{name:"Fangster",image:"./img/4.jpg",id:3,clicks:0},{name:"Mr. Widdershins",image:"./img/5.jpg",id:4,clicks:0}],currentCat:null};const catListViewer={init:function(){this.catList=document.querySelector("#catList"),this.render()},render:function(){let t="",e=controller.getCats();e.forEach(e=>{t+=`\n                <li class="catButton">${e.name}</li> \n                `,catList.innerHTML=t}),catList.addEventListener("click",t=>{e.forEach(e=>{t.target.innerHTML===e.name&&(controller.setCurrent(e),catViewer.render())})})}},catViewer={init:function(){this.catDisplay=document.querySelector("#catDisplay"),this.clickCounter=document.querySelector("#clicks"),catDisplay.addEventListener("click",t=>{"catImage"===t.target.className&&controller.clickCount()}),this.render()},render:function(){let t="",e=controller.getCurrent();t=`\n            <img src="${e.image}" class="catImage">\n            <p>Name: ${e.name}</p>\n            <p>ID#: ${e.id}</p>\n            <p>Number of clicks:<span id="clicks">${e.clicks}</span><p>\n        `,catDisplay.innerHTML=t}};controller.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
